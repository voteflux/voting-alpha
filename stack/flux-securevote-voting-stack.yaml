AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  This is a one-click secure(ish) voting stack. This template will deploy
  an Ethereum POA network on Amazon EC2 instances pre-loaded with voting smart
  contracts, along with websites and resources needed for voters to participate.
  You're able to integrate this with any membership database provided you're
  able to call an HTTPS endpoint.

  It also includes the Ethereum Network Stats and Ethereum Explorer services.

  Based on a heavily modified version of Amazon's blockchain templates.

  NOTE: Only some parts of this project are licenced under Apache 2.0 (inherited from AWS's blockchain templates
  and johnbrandborg/aws-acm-autovalidate). Please see individual files for more.

  License: Apache 2.0 (Please do not remove) Apr 4, 2018 (bt-f5kb4kx9v)


# TODO: EC2 keypair, security group, instance profile?, vpc, subnets, domains


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network parameters
        Parameters:
          - NamePrefix
          - BlockGasLimit
          - NumberOfEthereumConsensusNodes
          - NumberOfEthereumPublicNodes

      - Label:
          default: Platform/EC2 configuration
        Parameters:
          - EC2InstanceType
          - SSHKey
          - SSHEncryptionPassword

      - Label:
          default: Domain Name configuration
        Parameters:
          - HostedZoneDomain
          - Subdomain

      - Label:
          default: Administration details
        Parameters:
          - AdminEmail

    ParameterLabels:
      NamePrefix:
        default: A DNS compatible name prefix to use in the names of resources (e.g. fluxvote-testnet)
      NumberOfEthereumConsensusNodes:
        default: Number of Ethereum Consensus nodes (not remotely accessable)
      NumberOfEthereumPublicNodes:
        default: Number of Ethereum public nodes (for accessing blockchain data)
      BlockGasLimit:
        default: Approximate voting capacity is (BlockGasLimit / 100000) per 5 seconds, so 8 million allows for around 16 votes per second.
      SSHKey:
        default: An SSH Public key to configure the EC2 nodes with. (Leave blank to generate a new one and email to the administrator)
      SSHEncryptionPassword:
        default: Only required if an SSHKey is not provided. The password with which to encrypt the SSH key before delivery via email.
      EC2InstanceType:
        default: EC2 Instance Type
      HostedZoneDomain:
        default: The root domain name of the hosted zone to use (note, you must include the trailing '.')
      Subdomain:
        default: The subdomain to use under the hosted zone (e.g. app for all domains under *.app.my.tld if my.tld was associated with the hosted zone)
      AdminEmail:
        default: The email address of the administrator. Various configuration items will be emailed following the stack deployment. Additionally alerts from the production system will also be forwarded here.


Parameters:
  NamePrefix:
    Description: A DNS compatible name prefix to use in the names of resources (e.g. fluxvote-testnet)
    Type: String
    MaxLength: '20'

  EnvironmentName:
    Description: A short name describing your environment (e.g. 'prod' or 'dev'). Production should _ALWAYS_ be called 'prod'!!
    Default: prod
    Type: String
    MaxLength: '10'

  AdminEmail:
    Description: The email address for the administrator. Alerts and configuration items will be sent here, including SSH keys.
    Type: String
  SSHEncryptionPassword:
    Description: A password to encrypt the generated SSH key with (which is emailed to Admin). Only required if an SSHKey is not provided.
    Type: String
    Default: ''

  HostedZoneDomain:
    Description: The hosted zone domain to use for subdomains
    Type: String
  Subdomain:
    Description: The subdomain to use under the hosted zone (e.g. 'vote' will mean all domains are created under *.vote.my.tld if my.tld corresponds to the above the hosted zone)
    Default: "secure-voting"
    Type: String

  NumberOfEthereumConsensusNodes:
    Type: Number
    Default: '2'
    MinValue: 1
    MaxValue: 20
    Description: There must be at least one Ethereum consensus node.
    ConstraintDescription: You must have at least one Ethereum consensus node.
  NumberOfEthereumPublicNodes:
    Type: Number
    Default: '2'
    MinValue: 1
    MaxValue: 20
    Description: There must be at least one Ethereum public node.
    ConstraintDescription: You must have at least one Ethereum consensus.
  BlockGasLimit:
    Type: Number
    Default: '8000000'
    Description: The limit on the total amount of gas that can be spent for transactions in a block. This is the target block gas limit for the miner, not the starting block gas limit set in the genesis block.
    MinValue: 1000000
    MaxValue: 1000000000
    ConstraintDescription: Block Gas Limit must be between 1 million and 1 billion.
  SSHKey:
    Type: 'String'  # AWS::EC2::KeyPair::KeyName
    Description: An SSH public key to configure the EC2 nodes to accept for login. If one is not provided a fresh key will be created and emailed to the administrator.
  EC2InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.nano
      - t3.nano
      - t2.micro
      - t3.micro
      - t2.small
      - t2.medium
      - t3.small
      - t3.medium
    ConstraintDescription: Please choose a valid instance type.
#      - t2.large
#      - t2.xlarge
#      - t2.2xlarge
#      - m3.medium
#      - m3.large
#      - m3.xlarge
#      - m3.2xlarge
#      - m4.large
#      - m4.xlarge
#      - m4.2xlarge
#      - m4.4xlarge
#      - m4.10xlarge
#      - r3.large
#      - r3.xlarge
#      - r3.2xlarge
#      - r3.4xlarge
#      - r3.8xlarge
#      - r4.large
#      - r4.xlarge
#      - r4.2xlarge
#      - r4.4xlarge
#      - r4.8xlarge
#      - r4.16xlarge
#      - c4.large
#      - c4.xlarge
#      - c4.2xlarge
#      - c4.4xlarge
#      - c4.8xlarge
#      - c5.large
#      - c5.xlarge
#      - c5.2xlarge
#      - c5.4xlarge
#      - c5.9xlarge
#      - c5.18xlarge
  pAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  pDeployMacros:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'true'
#  pDeployAcmAutovalidate:
#    Type: String
#    AllowedValues: ['true', 'false']
#    Default: 'true'
  pChaincodeTimeout:
    Type: Number
    Default: 100
    Description: "You only need to extend this if you have incredibly complex SC systems or need to wait for a slow/public network"
    # originaly 10

  # control stack creation events (useful for initial deployments that don't roll back everything)
  
  pCreateNodes:
    Type: String
    Default: 'true'
  pCreateChaincodeStack:
    Type: String
    Default: 'true'
  pCreateMembersApp:
    Type: String
    Default: 'true'
  pCreateAlb:
    Type: String
    Default: 'false'

  pVoterGroupToAddressMapJson:
    Type: String
    Description: "A JSON serialized map of names of groups to the relevant smart contracts. For none, use the empty JSON object: {}"

  pMemberEmailDeliveryNotificationEmail:
    Type: String

  pHashSalt:
    Type: String

  pVpc:
    Type: String
    Default: vpc-15818172  # flux dev acct default VPC ID


Conditions:
  cFalse: !Equals [ "true", "false" ]
  cTrue: !Equals [ "true", "true" ]
  cHasSSHKey:
    Fn::Not: [!Equals [ !Ref SSHKey, '' ]]
  cHasSSHEncPw:
    Fn::Not: [!Equals [ !Ref SSHEncryptionPassword, '' ]]
  cShouldGenEc2SSHKey:
    Fn::And:
      - !Not [{ Condition: cHasSSHKey }]
      - { Condition: cHasSSHEncPw }
  cDeployMacros:
    !Equals [ !Ref pDeployMacros, 'true' ]
#  cDeployAcmAutovalidate:
#    !Equals [ !Ref pDeployAcmAutovalidate, 'true' ]
  
  # control stack creation conditions

  cCreateNodes:
    !Equals [ !Ref pCreateNodes, 'true' ]
  cCreateChaincodeStack:
    !And [{ Condition: cCreateNodes }, !Equals [ !Ref pCreateChaincodeStack, 'true' ] ]
  cCreateMembersApp:
    !And [{ Condition: cCreateChaincodeStack }, !And [ !Equals [ !Ref pCreateMembersApp, 'true' ], { Condition: cTrue } ] ]
    # !Equals [ "true", "false" ]
  cCreateAlb:
    !And [{ Condition: cCreateMembersApp }, !Equals [ !Ref pCreateAlb, 'true' ] ]


Globals:
  Function:
    Runtime: python3.7
    Timeout: 180
    Environment:
      Variables:
        PYTHON_PATH: "/opt:/opt/deps"
        PYTHONPATH: "/opt:/opt/deps"


Resources:
  rLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    DeletionPolicy: Delete
    Properties:
      ContentUri: ./cr/common
      Description: layer for all/common deps for custom resources / lambdas
      LayerName: !Sub ${NamePrefix}-common-layer


  rMacroStack:
    Condition: cDeployMacros
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./sv-macros.yaml
      Parameters:
        pLambdaLayer: !Ref rLambdaLayer


  rAcmCertStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested/acm-cert-dns.yaml
      Parameters:
        pNamePrefix: !Ref NamePrefix
        pDomain: !Ref HostedZoneDomain
        pSubdomain: !Ref Subdomain
        pWildcard: 'true'


  rStaticBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Sub ${NamePrefix}-static-resources
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [ 'GET' ]
            AllowedOrigins: [ '*' ]
            MaxAge: 86400
      WebsiteConfiguration:
        IndexDocument: index.html


  rStaticBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${rStaticBucket}/*"
      Bucket: !Ref rStaticBucket


  rStaticBucketDomain:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${HostedZoneDomain}.
      Name: !Sub static.${Subdomain}.${HostedZoneDomain}.
      TTL: '60'
      Type: TXT
      ResourceRecords:
        - !Sub '"${rStaticBucket.DomainName}"'


  rStaticBucketCleanupCr:
    Type: Custom::StaticBucketCleanup
    Properties:
      ServiceToken: !GetAtt rStaticBucketCleanupLambda.Arn
      NamePrefix: !Ref NamePrefix
      StaticBucketName: !Ref rStaticBucket


  rStaticBucketCleanupLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: './cr/params'
      Runtime: python3.7
      Handler: 'index.handler_bucket_cleanup'
      FunctionName: !Sub ${NamePrefix}-bucket-cleanup-cr
      Timeout: 30
      Policies:
        - Statement:
            - Effect: Allow
              Action: s3:*
              Resource:
                - !GetAtt rStaticBucket.Arn
                - !Sub ${rStaticBucket.Arn}/*
      Layers: [ !Ref rLambdaLayer ]


#  rKms:
#    Type: AWS::KMS::Key
#    Properties:
#      KeyPolicy:
#        Statement:
#          - Effect: Allow
#            Resource: '*'
#            Action:
#              - kms:Decrypt
#              - kms:Encrypt
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#          - Effect: Allow
#            Resource: '*'
#            Action: kms:*
#            Principal:
#              AWS:
#                - !Sub arn:aws:iam::${AWS::AccountId}:root
##            AWS:
##              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${NamePrefix}-crypto-params-cr
#

#  rKmsAlias:
#    Type: AWS::KMS::Alias
#    Properties:
#      AliasName: !Sub alias/${NamePrefix}-general-kms-key
#      TargetKeyId: !GetAtt rKms.Arn


  rConsensusSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${NamePrefix}-nodes-consensus-sg
      GroupDescription: SG for consensus EC2 nodes (Eth)
#      VpcId: !Ref rVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 30303
          ToPort: 30303
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 30303
          ToPort: 30303
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp  # todo remove when appropriate
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0


  rPublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${NamePrefix}-nodes-public-sg
      GroupDescription: SG for publicly accessible EC2 nodes (Eth + IPFS)
#      VpcId: !Ref rVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8545
          ToPort: 8546
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 30303
          ToPort: 30303
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4001
          ToPort: 4001
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
#      SecurityGroupEgress:
#        - IpProtocol: "-1"
#          CidrIp: 0.0.0.0/0


  rParamsCr:
    Type: Custom::Params
    Properties:
      ServiceToken: !GetAtt rParamsLambda.Arn
      NamePrefix: !Ref NamePrefix
      SSHKey: !Ref SSHKey
      ShouldGenEc2SSHKey: !If [ cShouldGenEc2SSHKey, 'true', '' ]
      StaticBucketName: !Ref rStaticBucket
      AdminEmail: !Ref AdminEmail
      NConsensusNodes: !Ref NumberOfEthereumConsensusNodes
      NPublicNodes: !Ref NumberOfEthereumPublicNodes
      SSHEncryptionPassword: !Ref SSHEncryptionPassword
      BlockGasLimit: !Ref BlockGasLimit
      StackTesting: 'true'  # set to '' to disable
      pEnodeIps: !GetAtt rPublicNodeEips.Outputs.oPublicIps
      Nonce: 348989348


  rParamsLambda:
    Type: AWS::Serverless::Function
    DependsOn:
      - rNamePrefixStaticCr
      - rEthPrivkeysCr
    Properties:
      Layers: [ !Ref rLambdaLayer ]
      CodeUri: './cr/params'
      Runtime: python3.7
      Handler: 'index.handler_params'
      FunctionName: !Sub ${NamePrefix}-crypto-params-cr
      Timeout: 300
      Policies:
        - Statement:
          -
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:PutParameter
              - ssm:DeleteParameter
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sv-${NamePrefix}-param-*"
          -
            Effect: Allow
            Action:
              - ec2:CreateKeyPair
              - ec2:DeleteKeyPair
              - ec2:ImportKeyPair
            Resource:
              - '*'
              # It's unfortunate but we can't do resource level stuff with ec2:*KeyPair actions: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/ec2-api-permissions.html#ec2-api-unsupported-resource-permissions
              #- !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/sv-${NamePrefix}-node-ec2-ssh-key*
              #- !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/sv-${NamePrefix}-node-ec2-ssh-key
          -
            Effect: Allow
            Action:
              - ec2:DescribeKeyPairs
              - ssm:DescribeParameters
            Resource: '*'
          -
            Effect: Allow
            Action: s3:*
            Resource:
              - !GetAtt rStaticBucket.Arn
              - !Sub ${rStaticBucket.Arn}/*


  rEthPrivkeysCr:
    Type: Custom::EthPrivkeys
    Properties:
      ServiceToken: !GetAtt rEthPrivkeysLambda.Arn
      NamePrefix: !Ref NamePrefix
      NConsensusNodes: !Ref NumberOfEthereumConsensusNodes
      NPublicNodes: !Ref NumberOfEthereumPublicNodes


  rEthPrivkeysLambda:
    Type: AWS::Serverless::Function
    Properties:
      Layers: [ !Ref rLambdaLayer ]
      CodeUri: './cr/params'
      Runtime: python3.7
      Handler: 'index.handler_priv_keys'
      FunctionName: !Sub ${NamePrefix}-eth-priv-keys-cr
      Timeout: 30
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ssm:PutParameter
                - ssm:DeleteParameter
                - ssm:DeleteParameters
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sv-${NamePrefix}-param-*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sv-${NamePrefix}-nodekey-consensus-*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sv-${NamePrefix}-enodekey-public-*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sv-${NamePrefix}-nodekey-service-*"
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sv-${NamePrefix}-param-*"
            - Effect: Allow
              Action:
                - ssm:DescribeParameters
              Resource: '*'


  rNamePrefixStaticCr:
    Type: Custom::NamePrefixStatic
    Properties:
      ServiceToken: !GetAtt rNamePrefixStaticLambda.Arn
      NamePrefix: !Ref NamePrefix


  rNamePrefixStaticLambda:
    Type: AWS::Serverless::Function
    Properties:
      Layers: [ !Ref rLambdaLayer ]
      CodeUri: './cr/params'
      Runtime: python3.7
      Handler: 'index.handler_prevent_nameprefix_change'
      FunctionName: !Sub ${NamePrefix}-nameprefix-static-cr
      Timeout: 30
      Policies: []


#  rVpcStack:
#    Type: AWS::Cloudformation::Stack
#    Condition: cCreateMembersApp
#    Properties:
#      TemplateURL: ./nested/vendor/vpc-3azs.yaml
#      Parameters:
#        ClassB: 13


#  rVpc:
#    Type: AWS::EC2::VPC
#    Properties:
#      CidrBlock: 10.13.37.0/20  # should be 10.13.32.0 -> 10.13.47.255
#      EnableDnsSupport: true
#      EnableDnsHostnames: true

#  rSubnet1:
#    Type: AWS::EC2::Subnet
#    Properties:
#      AvailabilityZone: !Sub ${AWS::Region}a
#      CidrBlock: 10.13.37.0/24
#      MapPublicIpOnLaunch: true
#      VpcId: !Ref rVpc

#  rSubnet2:
#    Type: AWS::EC2::Subnet
#    Properties:
#      AvailabilityZone: !Sub ${AWS::Region}b
#      CidrBlock: 10.13.38.0/24
#      MapPublicIpOnLaunch: true
#      VpcId: !Ref rVpc

#  rRouteTable:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId: !Ref rVpc
#
#  rNatForSubnet1:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt rVpcElasticIP.AllocationId
#      SubnetId: !Ref rSubnet1
#
#  rVpcElasticIP:
#    Type: AWS::EC2::EIP
#    Properties:
#      Domain: vpc
#
#  rNatRoute:
#    Type: AWS::EC2::Route
#    DependsOn:
#      - rNatForSubnet1
#    Properties:
#      RouteTableId: !Ref rRouteTable
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId: !Ref rVpc
#
#  rVpcInternetGateway:
#    Type: AWS::EC2::InternetGateway
#
#  rVpcGatewayAttachement:
#    Type: AWS::EC2::VPCGatewayAttachment
#    Properties:
#      InternetGatewayId: !Ref rVpcInternetGateway
#      VpcId: !Ref rVpc


  # todo: macro these out
  rConsensusNode0:
    Type: AWS::CloudFormation::Stack
    Condition: cCreateNodes
    Properties:
      TemplateURL: ./nested/sv-consensus-node-new.yaml
      Parameters:
        pChainSpecUrl: !GetAtt rParamsCr.ChainSpecUrl
        pEC2InstanceType: !Ref EC2InstanceType
        pSecurityGroup: !Ref rConsensusSG
        pAmiId: !Ref pAmiId
        pNodeNumber: '0'
        pNamePrefix: !Ref NamePrefix
        pAvailabilityZone: !Sub ${AWS::Region}a
        pSignerAddress: !Select [ 0, !GetAtt rEthPrivkeysCr.PoAAddresses ]
        pDomain: !Ref HostedZoneDomain
        pSubdomain: !Ref Subdomain


  rConsensusNode1:
    Type: AWS::CloudFormation::Stack
    Condition: cCreateNodes
    Properties:
      TemplateURL: ./nested/sv-consensus-node-new.yaml
      Parameters:
        pChainSpecUrl: !GetAtt rParamsCr.ChainSpecUrl
        pEC2InstanceType: !Ref EC2InstanceType
        pSecurityGroup: !Ref rConsensusSG
        pAmiId: !Ref pAmiId
        pNodeNumber: '1'
        pNamePrefix: !Ref NamePrefix
        pAvailabilityZone: !Sub ${AWS::Region}b
        pSignerAddress: !Select [ 1, !GetAtt rEthPrivkeysCr.PoAAddresses ]
        pDomain: !Ref HostedZoneDomain
        pSubdomain: !Ref Subdomain


  # todo: macro these out
  rPublicNode0:
    Type: AWS::CloudFormation::Stack
    Condition: cCreateNodes
    Properties:
      TemplateURL: ./nested/sv-public-node-new.yaml
      Parameters:
        pChainSpecUrl: !GetAtt rParamsCr.ChainSpecUrl
        pEC2InstanceType: !Ref EC2InstanceType
        pSecurityGroup: !Ref rPublicSG
        pAmiId: !Ref pAmiId
        pNodeNumber: '0'
        pNamePrefix: !Ref NamePrefix
        pAvailabilityZone: !Sub ${AWS::Region}a
        pDomain: !Ref HostedZoneDomain
        pSubdomain: !Ref Subdomain
        pEipAddress: !Select [ 0, !Split [ ',', !GetAtt rPublicNodeEips.Outputs.oPublicIps ] ]


  rPublicNode1:
    Type: AWS::CloudFormation::Stack
    Condition: cCreateNodes
    Properties:
      TemplateURL: ./nested/sv-public-node-new.yaml
      Parameters:
        pChainSpecUrl: !GetAtt rParamsCr.ChainSpecUrl
        pEC2InstanceType: !Ref EC2InstanceType
        pSecurityGroup: !Ref rPublicSG
        pAmiId: !Ref pAmiId
        pNodeNumber: '1'
        pNamePrefix: !Ref NamePrefix
        pAvailabilityZone: !Sub ${AWS::Region}b
        pDomain: !Ref HostedZoneDomain
        pSubdomain: !Ref Subdomain
        pEipAddress: !Select [ 1, !Split [ ',', !GetAtt rPublicNodeEips.Outputs.oPublicIps ] ]


  rPublicNodeEips:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested/sv-public-eips.yaml
      Parameters:
        pNPublicNodes: !Ref NumberOfEthereumPublicNodes
        pDependsShim: !If [ cDeployMacros, !Ref rMacroStack, !Ref rStaticBucket ]


  rChaincodeStack:
    Type: AWS::CloudFormation::Stack
    Condition: cCreateChaincodeStack
    DependsOn:
      - rPublicNode0
      - rPublicNode1
      - rConsensusNode0
      - rConsensusNode1
      - rEthPrivkeysCr
    Properties:
      TemplateURL: ./nested/sv-chaincode-loader.yaml
      TimeoutInMinutes: !Ref pChaincodeTimeout
      Parameters:
        pNamePrefix: !Ref NamePrefix
        pPublicNodeDomain: !GetAtt rPublicNode0.Outputs.oPublicIp
        pLambdaLayer: !Ref rLambdaLayer


  rApiBootstrapStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested/sv-api-bootstrap.yaml
      Parameters:
        pNamePrefix: !Ref NamePrefix
        pDomain: !Ref HostedZoneDomain
        pSubdomain: !Ref Subdomain
        pCertArn: !GetAtt rAcmCertStack.Outputs.oCertificateArn


  rMembersApp:
    Type: AWS::Serverless::Application
    Condition: cCreateMembersApp
    Properties:
      Location: ./nested/sv-members-app.yaml
      Parameters:
        pNamePrefix: !Ref NamePrefix
        pApiDomainRaw: !Sub ${Subdomain}.${HostedZoneDomain}
        pEthHost: !Sub http://${rPublicNode0.Outputs.oPublicIp}:8545
        pMembershipContract: !GetAtt rChaincodeStack.Outputs.oMembershipAddr
        pCertArn: !GetAtt rAcmCertStack.Outputs.oCertificateArn
        pApiDomain: !GetAtt rApiBootstrapStack.Outputs.oApiDomain
        pApiStageName: svprod
        pLambdaLayer: !Ref rLambdaLayer
        pAdminEmail: !Ref AdminEmail
        pVoterGroupToAddressMapJson: !Ref pVoterGroupToAddressMapJson
        pMemberEmailDeliveryNotificationEmail: !Ref pMemberEmailDeliveryNotificationEmail
        pHashSalt: !Ref pHashSalt
        pEnv: !Ref EnvironmentName
#        pSesConfigurationSetName: !Ref rMemberEmailConfigurationSet

# Template format error: Unrecognized resource types: [AWS::SES::ConfigurationSet]
#  rMemberEmailConfigurationSet:
#    Type: AWS::SES::ConfigurationSet
#    Properties:
#      Name: !Sub ${NamePrefix}-member-email-deliveries


#  rPublicLoadBalancer:
#    Type: AWS::CloudFormation::Stack
#    Condition: cCreateAlb
#    Properties:
#      TemplateURL: ./nested/sv-public-alb.yaml
#      Parameters:
#        pPublicIps: !GetAtt rPublicNodeEips.Outputs.oPublicIps
#        pNamePrefix: !Ref NamePrefix
#        pCertificateArn: !GetAtt rAcmCertStack.Outputs.oCertificateArn
#        pPublicNode0: !GetAtt rPublicNode0.Outputs.oInstanceId
#        pPublicNode1: !GetAtt rPublicNode1.Outputs.oInstanceId
#        pVpcId: !GetAtt rVpcStack.Outputs.VPC
#        pSubnets: !GetAtt rVpcStack.Outputs.SubnetsPublic

  # rAlbDomain:
  #   Type: AWS::Route53::RecordSet
  #   Condition: cCreateAlb
  #   Properties:
  #     HostedZoneName: !Sub ${HostedZoneDomain}.
  #     AliasTarget:
  #       DNSName: !GetAtt rPublicLoadBalancer.Outputs.oAlbDnsName
  #       HostedZoneId: !GetAtt rPublicLoadBalancer.Outputs.oAlbCanonHzId
  #     Name: !Sub nodes.${Subdomain}.${HostedZoneDomain}.
  #     Type: A

Outputs:
  oChainSpecUrl:
    Value: !GetAtt rParamsCr.ChainSpecUrl
  oEthNetworkId:
    Value: !GetAtt rParamsCr.NetworkId
  oEc2KeyPairName:
    Value: !GetAtt rParamsCr.KeyPairName
  oStaticDomain:
    Value: !Sub "static.${Subdomain}.${HostedZoneDomain}"
  oCertificateArn:
    Value: !GetAtt rAcmCertStack.Outputs.oCertificateArn
  oPublicNode0Ip:
    Condition: cCreateNodes
    Value: !GetAtt rPublicNode0.Outputs.oPublicIp
  oPublicNode1Ip:
    Condition: cCreateNodes
    Value: !GetAtt rPublicNode1.Outputs.oPublicIp
  oWeb3Provider:
    Condition: cCreateAlb
    Value: !If [
            cCreateAlb,
            !Sub 'https://nodes.${Subdomain}.${HostedZoneDomain}:8545',
            !Sub 'http://${rPublicNode0.Outputs.oDomainName}:8545'
            ]
#   EthStatsURL:
#     Description: "Visit this URL to see the status of your Ethereum nodes"
#     Value:
#       Fn::GetAtt: ["EthereumCommonStack", "Outputs.EthStatsURL"]
#   EthExplorerURL:
#     Description: "Visit this URL to view transactions on your Ethereum network"
#     Value:
#       Fn::GetAtt: ["EthereumCommonStack", "Outputs.EthExplorerURL"]
#   EthJsonRPCURL:
#     Description: "Use this URL to access the Geth JSON RPC of your Ethereum Clients, or input it into Metamask"
#     Value:
#       Fn::GetAtt: ["EthereumCommonStack", "Outputs.EthJsonRPCURL"]

  oMembershipAddr:
    Condition: cCreateChaincodeStack
    Value: !GetAtt rChaincodeStack.Outputs.oMembershipAddr
  oDemocHash:
    Condition: cCreateChaincodeStack
    Value: !GetAtt rChaincodeStack.Outputs.oDemocHash
  oMkDemocTxid:
    Condition: cCreateChaincodeStack
    Value: !GetAtt rChaincodeStack.Outputs.oMkDemocTxid
  oIndexAddr:
    Condition: cCreateChaincodeStack
    Value: !GetAtt rChaincodeStack.Outputs.oIndexAddr
  oBBFarmAddr:
    Condition: cCreateChaincodeStack
    Value: !GetAtt rChaincodeStack.Outputs.oBBFarmAddr
  oBBFarmAux2Addr:
    Condition: cCreateChaincodeStack
    Value: !GetAtt rChaincodeStack.Outputs.oBBFarmAux2Addr
  oTokenAbbrLookupAddr:
    Condition: cCreateChaincodeStack
    Value: !GetAtt rChaincodeStack.Outputs.oTokenAbbrLookupAddr
  oErc20BalProxyAddr:
    Condition: cCreateChaincodeStack
    Value: !GetAtt rChaincodeStack.Outputs.oErc20BalProxyAddr

  oApiUrl:
    Value: !Sub "https://${rApiBootstrapStack.Outputs.oApiDomain}/"
