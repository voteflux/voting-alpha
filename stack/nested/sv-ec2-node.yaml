AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  pEC2InstanceType:
    Type: String
  pSecurityGroup:
    Type: String
  pAmiId:
    Type: AWS::EC2::Image::Id
    # AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  pNodeNumber:
    Type: String
  pNamePrefix:
    Type: String
  pAvailabilityZone:
    Type: String
  pDomain:
    Type: String
  pSubdomain:
    Type: String
  pNodeType:
    Type: String
    AllowedValues: ['consensus', 'public']
  pEipAddress:
    Type: String
    Default: ''
  pVolumeSize:
    Type: Number
    Default: 50
  pLaunchScript:
    Type: String

Conditions:
  cAssociateEip: !Not [ !Equals [ !Ref pEipAddress, '' ] ]

Resources:

  rEipAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: cAssociateEip
    Properties:
      EIP: !Ref pEipAddress
      InstanceId: !Ref rEc2Instance

  rRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/ec2-role/"
      RoleName: !Sub sv-${pNamePrefix}-${pNodeType}node-${pNodeNumber}-role

  rPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub sv-${pNamePrefix}-${pNodeType}node-${pNodeNumber}-policy
      Roles:
        - !Ref rRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ssm:GetParameter
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sv-${pNamePrefix}-nodekey-${pNodeType}-${pNodeNumber}"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sv-${pNamePrefix}-enodekey-${pNodeType}-${pNodeNumber}"

  rInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn:
      - rPolicy
    Properties:
      Roles: [ !Ref rRole ]
      InstanceProfileName: !Sub sv-${pNamePrefix}-${pNodeType}-node-${pNodeNumber}-instanceprofile

  rDomainName:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${pDomain}.
      Name: !Sub ${pNodeType}-node-${pNodeNumber}.${pSubdomain}.${pDomain}.
      TTL: 60
      Type: A
      ResourceRecords:
        - !If [ cAssociateEip, !Ref pEipAddress, !GetAtt rEc2Instance.PublicIp ]

  rEc2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      ImageId: !Ref pAmiId
      KeyName: !Sub sv-${pNamePrefix}-node-ec2-ssh-key
      InstanceType: !Ref pEC2InstanceType
      SecurityGroups: [ !Ref pSecurityGroup ]
      AvailabilityZone: !Ref pAvailabilityZone
      InstanceInitiatedShutdownBehavior: stop
      IamInstanceProfile: !Ref rInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: !Ref pVolumeSize
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub sv-${pNamePrefix}-${pNodeType}-${pNodeNumber}
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          echo "${pNodeType}-node-${pNodeNumber}.${pSubdomain}.${pDomain}" > /etc/hostname
          yum install -y aws-cfn-bootstrap htop tree zsh curl
          res_install=$?
          echo "/usr/bin/zsh; exit" >> /home/ec2-user/.bashrc
          touch /home/ec2-user/.zshrc
          chown ec2-user:ec2-user /home/ec2-user/.zshrc
          yum update -y
          ${pLaunchScript}
          res_script=$?
          [[ "$res_script" == "0" ]] && [[ "$res_install" == "0" ]]
          res=$?
          echo "res: $res"
          /opt/aws/bin/cfn-signal -e $res \
            --stack ${AWS::StackName} \
            --resource rEc2Instance \
            --region ${AWS::Region}
          echo -e "\n\n---- done ----\n\n"

Outputs:
  oPublicIp:
    Value: !GetAtt rEc2Instance.PublicIp
  oDomainName:
    Value: !Ref rDomainName
  oInstanceId:
    Value: !Ref rEc2Instance
