AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  pPublicIps:
    Type: String
  pNamePrefix:
    Type: String
  pCertificateArn:
    Type: String
  pVpcId:
    Type: String
    # Default: "vpc-c7252ea2"
  pSubnets:
    Type: String
    # Default: "subnet-0635c95f,subnet-642dd012,subnet-b900d6dd"
  pPublicNode0:
    Type: String
  pPublicNode1:
    Type: String


# TODO: Fix up loadbalancer + listners


Resources:

  rPublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${pNamePrefix}-public-alb-sg
      GroupDescription: SG for ALB for publicly accessible EC2 nodes (Eth + IPFS)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8545
          ToPort: 8546
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  rLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 3600
      Name: !Sub ${pNamePrefix}-public-alb
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt rPublicSG.GroupId
      Type: application
      # Subnets: !Split [',', !Ref pSubnets]

  rTargetGroupWs:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${pNamePrefix}-tg-wss
      Port: 8546
      Protocol: HTTP
      Targets:
        - Id: !Ref pPublicNode0
          Port: 8546
        - Id: !Ref pPublicNode1
          Port: 8546
      TargetType: instance
      VpcId: !Ref pVpcId

  rTargetGroupHttp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${pNamePrefix}-tg-https
      Port: 8545
      Protocol: HTTP
      Targets:
        - Id: !Ref pPublicNode0
          Port: 8545
        - Id: !Ref pPublicNode1
          Port: 8545
      TargetType: instance
      VpcId: !Ref pVpcId

  # rListenerWss:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     Certificates:
  #       - { CertificateArn: !Ref pCertificateArn }
  #     DefaultActions:
  #       - TargetGroupArn: !Ref rTargetGroupWs
  #         Type: forward
  #     LoadBalancerArn: !Ref rLoadBalancer
  #     Port: 8546
  #     Protocol: HTTPS

  # rListenerHttps:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     Certificates:
  #       - { CertificateArn: !Ref pCertificateArn }
  #     DefaultActions:
  #       - TargetGroupArn: !Ref rTargetGroupHttp
  #         Type: forward
  #     LoadBalancerArn: !Ref rLoadBalancer
  #     Port: 8545
  #     Protocol: HTTPS

  # rListenerHttps443:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     Certificates:
  #       - { CertificateArn: !Ref pCertificateArn }
  #     DefaultActions:
  #       - TargetGroupArn: !Ref rTargetGroupHttp
  #         Type: forward
  #     LoadBalancerArn: !Ref rLoadBalancer
  #     Port: 443
  #     Protocol: HTTPS


Outputs:
  oWebsocketTargetGroup:
    Value: !Ref rTargetGroupWs

  # oAlbDnsName:
  #   Value: !GetAtt rLoadBalancer.DNSName

  # oAlbCanonHzId:
  #   Value: !GetAtt rLoadBalancer.CanonicalHostedZoneID
